function PlotEnvironment()
    %% Load Images
    groundImage = 'concrete.jpg';
    wallImage1 = 'MetalWall.jpg'; 
    wallImage2 = 'MetalWall.jpg'; 

    % Load sign images
    safetySign = 'Saftey.jpg'; 
    robotOperationSign = 'RobotOperation.jpg';
    emergencyStopSign = 'EmergencyStop.jpg';
    cautionRoboticSign = 'CautionRobotic.jpg';
    emergencyExitDoor = 'EmergencyExit.jpg';

    %% Create the figure window
    figure;
    hold on;
    %% Sets axis properties
    axis equal;
    xlabel('X');
    ylabel('Y');
    zlabel('Z');
    view(3);
    grid off;  % Turn off the grid

    %% Set axis limits and camera properties
    xmin=-10;
    xmax=4;

    ymin=-4;
    ymax=4;

    zmin=0;
    zmax=3;
    
    xlim([xmin, xmax]);
    ylim([ymin, ymax]);
    zlim([zmin, zmax]);

    camproj('perspective');  
    campos([0, -3, 1.5]);  
    camtarget([0, 0, 1]);  
    camva(6);  
    camlight('headlight');  
    lighting phong;

    %% Plotting functions
    % Helper function to place and transform objects (scaling, rotation, and color change)
    function placeAndTransformObject(filename, position, scale, rotationAngle, color)
        % Load the PLY file
        [faces, vertices, data] = plyread(filename, 'tri');
        
        % Set the vertex colors to black if specified
        if nargin == 5 && ~isempty(color)
            vertexColors = repmat(color, size(vertices, 1), 1);  % Set to the desired color (black in this case)
        else
            vertexColors = [data.vertex.red, data.vertex.green, data.vertex.blue] / 255;  % Original colors
        end
    
        % Apply scaling
        vertices = vertices .* scale;
    
        % Apply rotation (about the z-axis)
        rotationMatrix = makehgtform('zrotate', deg2rad(rotationAngle));
        vertices = (rotationMatrix(1:3, 1:3) * vertices')';
    
        % Apply translation
        vertices = vertices + position;
    
        % Plot the object with transformed vertices and new color
        trisurf(faces, vertices(:, 1), vertices(:, 2), vertices(:, 3), ...
            'FaceVertexCData', vertexColors, 'EdgeColor', 'none');
    end
    
    % Helper function to plot surfaces with texture and hide gridlines
    function plotSurfaceWithTexture(X, Y, Z, textureImage)
        surf(X, Y, Z, 'CData', imread(textureImage), 'FaceColor', 'texturemap', ...
            'EdgeColor', 'none', 'FaceLighting', 'gouraud');  % Remove gridlines and apply lighting
    end

    %% Create the ground plane
    [xGround, yGround] = meshgrid(xmin:0.1:4, xmin:0.1:4); 
    zGround = zeros(size(xGround));

    %% Create the first wall plane along the y-axis
    [xWall1, zWall1] = meshgrid(xmin:0.1:4, 0:0.1:4);
    yWall1 = 4 * ones(size(xWall1));

    %% Create the second wall plane along the x-axis
    [yWall2, zWall2] = meshgrid(ymin:0.1:4, 0:0.1:4);
    xWall2 = 4 * ones(size(yWall2));

    %% Plot the ground and walls using the helper function
    plotSurfaceWithTexture(xGround, yGround, zGround, groundImage);
    plotSurfaceWithTexture(xWall1, yWall1, zWall1, wallImage1);
    plotSurfaceWithTexture(xWall2, yWall2, zWall2, wallImage2);

    %% Plot objects using placeAndTransformObject

    % Plot the table
    placeAndTransformObject('tableBrown2.1x1.4x0.5m.ply', [2.4, 3, 0], [0.8, 0.3, 1.6], 90, [0.8, 0.5, 0.2]);

    % Plot the fire extinguisher
    placeAndTransformObject('fireExtinguisher.ply', [3.5, 3.5, 0.01], [1, 1, 1], 0);

    % Plot the person
    placeAndTransformObject('personMaleConstruction.ply', [3.4, 3, 0.01], [0.8, 0.8, 0.8], 180, [1, 0.8, 0.6]);

    % Plot the emergency stop button
    placeAndTransformObject('emergencyStopButton.ply', [2.5, 3, 0.8], [0.5, 0.5, 0.5], 0);

    % Plot the boxes conveyor
    placeAndTransformObject('ConveyerBeltBoxes.ply', [1, 1, 0], [1, 1, 1], -90);

    % Plot the pancake conveyor
    placeAndTransformObject('ConveyerBeltPancake.ply', [-3, 3, 0], [1, 1, 1], -90);

    % Plot the barriers
    placeAndTransformObject('SafetyWall.ply', [4, 0.6, 0.01], [0.01, 0.01, 0.01], 0, [0.5, 0.5, 0.5]); %Wall without Door
    placeAndTransformObject('PlasticStripDoor.ply', [2.2, 1.8, 0.01], [0.01, 0.01, 0.01], 270, [0.5, 0.5, 0.5]); %Wall with Door

    % Plot the box closer
    placeAndTransformObject('AutoBoxCloser.ply', [0.45, -1.2, 0.6], [0.01, 0.01, 0.01], 90);


    %% Define sign positions and sizes
    signWidth = 0.8;  
    signHeight = 0.8; 
    signPosX = [-4.5, -3, -1.5, 3];
    signLift = 0.8;  % Amount to lift the signs above the ground
    signImages = {safetySign, robotOperationSign, cautionRoboticSign, emergencyStopSign};

    % Plot signs
    for i = 1:length(signPosX)
        [xSign, zSign] = meshgrid(signPosX(i) + [-signWidth/2, signWidth/2], signLift:0.1:(signLift + signHeight));
        ySign = ones(size(xSign)) * 4; 
        
        % Flip the zSign values to rotate the image
        zSign = flip(zSign);
        
        plotSurfaceWithTexture(xSign, ySign, zSign, signImages{i});
    end


    hold off;
end

